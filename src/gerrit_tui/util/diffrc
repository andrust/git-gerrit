set nocompatible
set mouse=

syntax enable
colorscheme elflord
" set t_Co=256
set background=dark

set backspace=indent,eol,start

set noerrorbells
set novisualbell
set t_vb=

set number
set ruler
set autoread
set ignorecase
set smartcase

set hlsearch
set incsearch
set showmatch
" set colorcolumn=80
set nobackup
set nowb
set noswapfile
set scrolloff=3

set smarttab
set expandtab
set shiftwidth=4
set tabstop=4
set noautoindent
set smartindent
set diffexpr="diff --minimal"

nnoremap q :qa!<CR>
vnoremap q :qa!<CR>

highlight DiffAdd    term=bold         ctermbg=darkgreen    ctermfg=white    cterm=bold
highlight DiffText   term=reverse,bold ctermbg=darkyellow   ctermfg=black    cterm=bold
highlight DiffChange term=bold         ctermbg=black        ctermfg=white    cterm=bold
highlight DiffDelete term=none         ctermbg=darkred      ctermfg=white    cterm=none

" Plugin
if !has("python")
    echo "vim has to be compiled with +python to run this"
    finish
endif

if exists('g:plugin_plugin_loaded')
    echo "already loaded"
    finish
endif

let g:plugin_plugin_loaded = 1
let s:plugin_root_dir = fnamemodify(resolve(expand('<sfile>:p')), ':h')

python << EOF
import sys
import vim
sys.path.insert(0, vim.eval('s:plugin_root_dir'))
import Plugin
EOF

function! CheckCurrentPos()
    python Plugin.check_current_pos()
endfunction

autocmd CursorMoved * call CheckCurrentPos()

function! ProposeDraft()
    python Plugin.propose_draft()
endfunction 
command! -nargs=0 ProposeDraft call ProposeDraft()
nnoremap c :ProposeDraft<cr>

function! SaveDraft()
    python Plugin.save_draft()
endfunction
command! -nargs=0 SaveDraft call SaveDraft()
nnoremap s :SaveDraft<cr>

function! DiscardDraft()
    python Plugin.discard_draft()
endfunction
command! -nargs=0 DiscardDraft call DiscardDraft()
nnoremap D :DiscardDraft<cr>

function! Dispose()
    python Plugin.dispose()
endfunction
autocmd VimLeavePre * call Dispose()

function! NextComment()
    python Plugin.next_comment()
endfunction
command! -nargs=0 NextComment call NextComment()
nnoremap <c-n> :NextComment<cr>

function! PrevComment()
    python Plugin.prev_comment()
endfunction
command! -nargs=0 PrevComment call PrevComment()
nnoremap <c-p> :PrevComment<cr>

function! SetMapping()
    if &filetype != 'Comment' && &filetype != 'Draft'
        nnoremap q :qa!<CR>
        vnoremap q :qa!<CR>
    else
        nnoremap q :q!<CR>
    endif
endfunction
autocmd BufEnter * call SetMapping()

autocmd VimEnter * wincmd l
